# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: ID!
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean!
  onboardingStep: OnboardingStep!
}

enum OnboardingStep {
  Complete
  JobsTab
  ResumeTab
  ResumeUpdate
  SendMessage
  StartChat
}

type Resume {
  _id: ID!
  user: User!
  fileName: String!
  size: Float!
  mimeType: String!
  textContent: [String!]!
}

type JobDescription {
  _id: String!
  url: String!
  jobTitle: String!
  companyName: String!
  location: String!
  employmentType: String
  responsibilities: [String!]
  requirements: [String!]
  preferredQualifications: [String!]
  benefits: [String!]
  keywords: [String!]
}

type TextContentDto {
  content: String!
  type: TextContentType!
}

enum TextContentType {
  Original
  Updated
}

type StoredMessageDataDto {
  content: String!
  role: String!
  name: String!
  tool_call_id: String!
  additional_kwargs: JSON!
  response_metadata: JSON!
  id: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type StoredMessageDto {
  type: String!
  data: StoredMessageDataDto!
}

type Conversation {
  _id: String!
  user: User!
  baseResume: Resume!
  updatedResumeText: [[TextContentDto!]!]!
  jobDescription: JobDescription!
  startTime: DateTime!
  messages: [StoredMessageDto!]!
  isActive: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Query {
  getResume(resume: String!): Resume!
  getAllResumes: [Resume!]!
  getUser: User!
  getParsedJobDescription(jobUrl: String!): JobDescription!
  getJobDescriptionContent(jobUrl: String!): String!
  getJobDescription: JobDescription!
  getAllConversations: [Conversation!]!
  getConversationById(conversationId: String!): Conversation!
}

type Mutation {
  registerWithEmailAndPassword(registrationInput: RegistrationInput!): User!
  updateOnboardingStep(onboardingStep: OnboardingStep!): User!
}

input RegistrationInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  registrationSecret: String!
}